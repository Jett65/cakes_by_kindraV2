// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.23.0
// source: frosting.sql

package datebase

import (
	"context"

	"github.com/google/uuid"
)

const createFrosting = `-- name: CreateFrosting :one
INSERT INTO frosting (id, name, add_price)
VALUES ($1, $2, $3)
RETURNING id, name, add_price
`

type CreateFrostingParams struct {
	ID       uuid.UUID
	Name     string
	AddPrice string
}

func (q *Queries) CreateFrosting(ctx context.Context, arg CreateFrostingParams) (Frosting, error) {
	row := q.db.QueryRowContext(ctx, createFrosting, arg.ID, arg.Name, arg.AddPrice)
	var i Frosting
	err := row.Scan(&i.ID, &i.Name, &i.AddPrice)
	return i, err
}

const deleteFrosting = `-- name: DeleteFrosting :exec
DELETE FROM frosting WHERE id=$1
`

func (q *Queries) DeleteFrosting(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.ExecContext(ctx, deleteFrosting, id)
	return err
}

const getAllFrostings = `-- name: GetAllFrostings :many
SELECT id, name, add_price FROM frosting
`

func (q *Queries) GetAllFrostings(ctx context.Context) ([]Frosting, error) {
	rows, err := q.db.QueryContext(ctx, getAllFrostings)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Frosting
	for rows.Next() {
		var i Frosting
		if err := rows.Scan(&i.ID, &i.Name, &i.AddPrice); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getFrostingById = `-- name: GetFrostingById :one
SELECT id, name, add_price FROM frosting WHERE id=$1
`

func (q *Queries) GetFrostingById(ctx context.Context, id uuid.UUID) (Frosting, error) {
	row := q.db.QueryRowContext(ctx, getFrostingById, id)
	var i Frosting
	err := row.Scan(&i.ID, &i.Name, &i.AddPrice)
	return i, err
}

const updateFrosting = `-- name: UpdateFrosting :one
UPDATE frosting SET name=$2, add_price=$3
WHERE id=$1
RETURNING id, name, add_price
`

type UpdateFrostingParams struct {
	ID       uuid.UUID
	Name     string
	AddPrice string
}

func (q *Queries) UpdateFrosting(ctx context.Context, arg UpdateFrostingParams) (Frosting, error) {
	row := q.db.QueryRowContext(ctx, updateFrosting, arg.ID, arg.Name, arg.AddPrice)
	var i Frosting
	err := row.Scan(&i.ID, &i.Name, &i.AddPrice)
	return i, err
}
