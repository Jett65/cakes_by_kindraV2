// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.23.0
// source: filling.sql

package datebase

import (
	"context"

	"github.com/google/uuid"
)

const createFilling = `-- name: CreateFilling :one
INSERT INTO filling (id, name, price)
VALUES ($1, $2, $3)
RETURNING id, name, price
`

type CreateFillingParams struct {
	ID    uuid.UUID
	Name  string
	Price string
}

func (q *Queries) CreateFilling(ctx context.Context, arg CreateFillingParams) (Filling, error) {
	row := q.db.QueryRowContext(ctx, createFilling, arg.ID, arg.Name, arg.Price)
	var i Filling
	err := row.Scan(&i.ID, &i.Name, &i.Price)
	return i, err
}

const deleteFilling = `-- name: DeleteFilling :exec
DELETE FROM filling WHERE id=$1
`

func (q *Queries) DeleteFilling(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.ExecContext(ctx, deleteFilling, id)
	return err
}

const getAllFillings = `-- name: GetAllFillings :many
SELECT id, name, price FROM filling
`

func (q *Queries) GetAllFillings(ctx context.Context) ([]Filling, error) {
	rows, err := q.db.QueryContext(ctx, getAllFillings)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Filling
	for rows.Next() {
		var i Filling
		if err := rows.Scan(&i.ID, &i.Name, &i.Price); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getFillingById = `-- name: GetFillingById :one
SELECT id, name, price FROM filling WHERE id=$1
`

func (q *Queries) GetFillingById(ctx context.Context, id uuid.UUID) (Filling, error) {
	row := q.db.QueryRowContext(ctx, getFillingById, id)
	var i Filling
	err := row.Scan(&i.ID, &i.Name, &i.Price)
	return i, err
}

const updateFilling = `-- name: UpdateFilling :one
UPDATE filling SET name=$2, price=$3
WHERE id=$1
RETURNING id, name, price
`

type UpdateFillingParams struct {
	ID    uuid.UUID
	Name  string
	Price string
}

func (q *Queries) UpdateFilling(ctx context.Context, arg UpdateFillingParams) (Filling, error) {
	row := q.db.QueryRowContext(ctx, updateFilling, arg.ID, arg.Name, arg.Price)
	var i Filling
	err := row.Scan(&i.ID, &i.Name, &i.Price)
	return i, err
}
